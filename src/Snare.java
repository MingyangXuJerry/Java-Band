package algomusicfall2021.jerry.finalproject;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.FilterHighPass;
import com.jsyn.unitgen.Circuit;
import com.jsyn.unitgen.PulseOscillator;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.Add;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.RedNoise;
import com.softsynth.jmsl.JMSLPlugin;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PinkNoise;
import com.jsyn.unitgen.WhiteNoise;

// noises
// FM
// pulse env
// pitch env
// noise env
public class Snare extends Circuit implements UnitVoice, JMSLPlugin {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    WhiteNoise mWhiteNoise;
    RedNoise mRedNoise;
    SegmentedEnvelope mSegEnv;
    VariableRateMonoReader mMonoRdr;
    Add mAplus;
    PinkNoise mPinkNoise;
    PulseOscillator mPulseOsc;
    SegmentedEnvelope mSegEnv2;
    VariableRateMonoReader mMonoRdr2;
    Multiply mAtimes;
    FilterLowPass mLowPass;
    SegmentedEnvelope mSegEnv3;
    VariableRateMonoReader mMonoRdr3;
    FilterHighPass mHighPass;

    // Declare inner classes for any child circuits.

    public Snare() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort(output = mOutputPassThrough.output, "output");
        add(mWhiteNoise = new WhiteNoise());
        add(mRedNoise = new RedNoise());
        double[] mSegEnvData = {
            0.0, 1.0,
            0.033358936983316385, 0.3547008547008547,
            0.03999422854127417, 0.14102564102564102,
            0.03232887520365536, 0.09829059829059829,
            0.10677243606997916, 0.02564102564102564,
            0.45559682246730493, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        add(mMonoRdr = new VariableRateMonoReader());
        add(mAplus = new Add());
        add(mPinkNoise = new PinkNoise());
        add(mPulseOsc = new PulseOscillator());
        double[] mSegEnv2Data = {
            0.0, 0.36752136752136755,
            0.022112720957418158, 0.47863247863247865,
            0.017477985987313222, 0.717948717948718,
            0.018636684300413806, 0.8888888888888888,
            0.008933002481389576, 1.0,
            0.03440384794526737, 1.0,
        };
        mSegEnv2 = new SegmentedEnvelope( mSegEnv2Data );
        add(mMonoRdr2 = new VariableRateMonoReader());
        add(mAtimes = new Multiply());
        add(mLowPass = new FilterLowPass());
        double[] mSegEnv3Data = {
            0.0, 1.0,
            0.033358936983316385, 0.3547008547008547,
            0.03999422854127417, 0.14102564102564102,
            0.04003191127829556, 0.0,
        };
        mSegEnv3 = new SegmentedEnvelope( mSegEnv3Data );
        add(mMonoRdr3 = new VariableRateMonoReader());
        add(mHighPass = new FilterHighPass());
        // Connect units and ports.
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mAmplitudePassThrough.output.connect(mMonoRdr3.amplitude);
        mWhiteNoise.output.connect(mLowPass.input);
        mRedNoise.output.connect(mOutputPassThrough.input);
        mMonoRdr.output.connect(mRedNoise.amplitude);
        mMonoRdr.output.connect(mWhiteNoise.amplitude);
        mAplus.output.connect(mAtimes.inputA);
        mPinkNoise.output.connect(mAplus.inputA);
        mPulseOsc.output.connect(mLowPass.input);
        mMonoRdr2.output.connect(mAtimes.inputB);
        mAtimes.output.connect(mPulseOsc.frequency);
        mLowPass.output.connect(mHighPass.input);
        mMonoRdr3.output.connect(mPulseOsc.amplitude);
        mHighPass.output.connect(mOutputPassThrough.input);
        // Setup
        frequency.setup(40.0, 124.0, 8000.0);
        amplitude.setup(0.0, 0.8, 0.8);
        mRedNoise.frequency.set(4000.0);
        mMonoRdr.rate.set(1.0);
        mAplus.inputB.set(80.0);
        mPinkNoise.amplitude.set(1.0);
        mPulseOsc.width.set(0.25702614453309086);
        mMonoRdr2.amplitude.set(1.0);
        mMonoRdr2.rate.set(1.0);
        mLowPass.frequency.set(6000.0);
        mLowPass.amplitude.set(1.0);
        mLowPass.Q.set(1.0);
        mMonoRdr3.rate.set(1.0);
        mHighPass.frequency.set(400.0);
        mHighPass.amplitude.set(1.0);
        mHighPass.Q.set(0.5);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
        mMonoRdr2.dataQueue.queueOn( mSegEnv2, timeStamp);
        mMonoRdr3.dataQueue.queueOn( mSegEnv3, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
        mMonoRdr2.dataQueue.queueOff( mSegEnv2, false, timeStamp);
        mMonoRdr3.dataQueue.queueOff( mSegEnv3, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
