package algomusicfall2021.jerry.finalproject;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;
import com.jsyn.unitgen.PulseOscillator;
import com.jsyn.unitgen.Subtract;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.SawtoothOscillator;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.RedNoise;
import com.softsynth.jmsl.JMSLPlugin;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.WhiteNoise;

// mod env
// frequency mod
// up a 5th
// fundamental sawOsc
// noise attack
// sub
// main env
// attack env
public class Kick extends Circuit implements UnitVoice, JMSLPlugin {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    VariableRateMonoReader mMonoRdr;
    SegmentedEnvelope mSegEnv;
    SegmentedEnvelope mModEnv;
    VariableRateMonoReader mMonoRdr2;
    Multiply mAtimes;
    Multiply mAtimes2;
    SawtoothOscillator mSawOsc;
    SawtoothOscillator mSawOsc2;
    SineOscillator mSineOsc2;
    Multiply mAtimes3;
    Multiply mAtimes22;
    RedNoise mRedNoise;
    SegmentedEnvelope mModEnv2;
    VariableRateMonoReader mMonoRdr22;
    Multiply mAtimes5;
    Multiply mAtimes7;
    VariableRateMonoReader mMonoRdr3;
    SegmentedEnvelope mSegEnv2;
    Subtract mAminus;
    Multiply mAtimes8;
    WhiteNoise mWhiteNoise;
    FilterLowPass mLowPass;
    PulseOscillator mPulseOsc;

    // Declare inner classes for any child circuits.

    public Kick() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort(output = mOutputPassThrough.output, "output");
        add(mMonoRdr = new VariableRateMonoReader());
        double[] mSegEnvData = {
            0.0, 1.0,
            0.028305434371852938, 0.8547008547008547,
            0.006950260217064005, 0.5299145299145299,
            0.03121182411090316, 0.1452991452991453,
            0.09263265902681209, 0.06837606837606838,
            0.13253649917647292, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        double[] mModEnvData = {
            0.0, 0.0,
            0.02039947533979109, 0.4017094017094017,
            0.05156534044224971, 0.782051282051282,
            0.12239685203874653, 1.0,
        };
        mModEnv = new SegmentedEnvelope( mModEnvData );
        add(mMonoRdr2 = new VariableRateMonoReader());
        add(mAtimes = new Multiply());
        add(mAtimes2 = new Multiply());
        add(mSawOsc = new SawtoothOscillator());
        add(mSawOsc2 = new SawtoothOscillator());
        add(mSineOsc2 = new SineOscillator());
        add(mAtimes3 = new Multiply());
        add(mAtimes22 = new Multiply());
        add(mRedNoise = new RedNoise());
        double[] mModEnv2Data = {
            0.0, 0.0,
            0.0, 1.0,
            0.015632754342431762, 0.7948717948717948,
            0.02382133995037221, 0.06837606837606838,
            0.015426831165703411, 0.0,
        };
        mModEnv2 = new SegmentedEnvelope( mModEnv2Data );
        add(mMonoRdr22 = new VariableRateMonoReader());
        add(mAtimes5 = new Multiply());
        add(mAtimes7 = new Multiply());
        add(mMonoRdr3 = new VariableRateMonoReader());
        double[] mSegEnv2Data = {
            0.07708057798799599, 1.0,
            0.09095559686528107, 0.4700854700854701,
            0.30621062814230376, 0.31196581196581197,
            0.7470162060257186, 0.0,
        };
        mSegEnv2 = new SegmentedEnvelope( mSegEnv2Data );
        add(mAminus = new Subtract());
        add(mAtimes8 = new Multiply());
        add(mWhiteNoise = new WhiteNoise());
        add(mLowPass = new FilterLowPass());
        add(mPulseOsc = new PulseOscillator());
        // Connect units and ports.
        mAtimes7.inputA.set(120.0);;
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mMonoRdr.output.connect(mAtimes3.inputA);
        mMonoRdr.output.connect(mSawOsc2.amplitude);
        mMonoRdr.output.connect(mPulseOsc.amplitude);
        mMonoRdr2.output.connect(mAtimes.inputA);
        mAtimes.output.connect(mAminus.inputB);
        mAtimes2.output.connect(mSawOsc.frequency);
        mSawOsc.output.connect(mOutputPassThrough.input);
        mSawOsc2.output.connect(mLowPass.input);
        mSineOsc2.output.connect(mOutputPassThrough.input);
        mAtimes3.output.connect(mSawOsc.amplitude);
        mRedNoise.output.connect(mOutputPassThrough.input);
        mMonoRdr22.output.connect(mRedNoise.amplitude);
        mMonoRdr22.output.connect(mAtimes5.inputA);
        mAtimes5.output.connect(mWhiteNoise.amplitude);
        mAtimes7.output.connect(mAtimes8.inputA);
        mAtimes7.output.connect(mAminus.inputA);
        mMonoRdr3.output.connect(mSineOsc2.amplitude);
        mAminus.output.connect(mSawOsc2.frequency);
        mAminus.output.connect(mAtimes22.inputA);
        mAminus.output.connect(mAtimes2.inputA);
        mAminus.output.connect(mPulseOsc.frequency);
        mAtimes8.output.connect(mAtimes.inputB);
        mWhiteNoise.output.connect(mOutputPassThrough.input);
        mLowPass.output.connect(mOutputPassThrough.input);
        mPulseOsc.output.connect(mLowPass.input);
        // Setup
        frequency.setup(0.0, 120.0, 240.0);
        amplitude.setup(0.0, 0.5, 1.0);
        mMonoRdr.rate.set(1.0);
        mMonoRdr2.amplitude.set(0.679);
        mMonoRdr2.rate.set(1.0);
        mAtimes2.inputB.set(1.4983);
        mSineOsc2.frequency.set(40.0);
        mAtimes3.inputB.set(0.5);
        mAtimes22.inputB.set(1.0);
        mRedNoise.frequency.set(800.0);
        mMonoRdr22.amplitude.set(0.2);
        mMonoRdr22.rate.set(1.0);
        mAtimes5.inputB.set(0.1);
        mAtimes7.inputB.set(0.5);
        mMonoRdr3.amplitude.set(0.3);
        mMonoRdr3.rate.set(1.0);
        mAtimes8.inputB.set(0.5);
        mLowPass.frequency.set(3000.0);
        mLowPass.amplitude.set(1.0);
        mLowPass.Q.set(2.0);
        mPulseOsc.width.set(1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
        mMonoRdr2.dataQueue.queueOn( mModEnv, timeStamp);
        mMonoRdr22.dataQueue.queueOn( mModEnv2, timeStamp);
        mMonoRdr3.dataQueue.queueOn( mSegEnv2, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
        mMonoRdr2.dataQueue.queueOff( mModEnv, false, timeStamp);
        mMonoRdr22.dataQueue.queueOff( mModEnv2, false, timeStamp);
        mMonoRdr3.dataQueue.queueOff( mSegEnv2, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
