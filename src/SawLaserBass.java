package algomusicfall2021.jerry.finalproject;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.RangeConverter;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.unitgen.LineOut;
import com.jsyn.unitgen.MixerStereo;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;

import com.jsyn.JSyn;
import com.jsyn.Synthesizer;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.swing.SoundTweaker;
import com.jsyn.unitgen.Add;
import com.jsyn.unitgen.SawtoothOscillator;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.softsynth.shared.time.TimeStamp;

// Env that modulates the amplitude of ModOsc
// ModOsc with an enveloped freq
// fundamental SineOsc
// frequency mod
// Sub
public class SawLaserBass extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SineOscillator mModOsc;
    Add mAplus;
    PassThrough mModFreqPassThrough;
    public UnitInputPort modFreq;
    PassThrough mModAmpPassThrough;
    public UnitInputPort ModAmp;
    VariableRateMonoReader mMonoRdr;
    SegmentedEnvelope mSegEnv;
    SegmentedEnvelope mModEnv;
    VariableRateMonoReader mMonoRdr2;
    Multiply mAtimes;
    SegmentedEnvelope mModEnv2;
    VariableRateMonoReader mMonoRdr22;
    Multiply mAtimes2;
    SawtoothOscillator mSawOsc;
    SineOscillator mSineOsc;
    Multiply mAtimes3;
    Multiply mAtimes4;
    FilterLowPass mLowPass;
    Multiply mAtimes5;
    Multiply mAtimes6;
    PassThrough mLPF_CutPassThrough;
    public UnitInputPort LPF_Cut;
    RangeConverter mARanger;

    // Declare inner classes for any child circuits.

    public SawLaserBass() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort(output = mOutputPassThrough.output, "output");
        add(mModOsc = new SineOscillator());
        add(mAplus = new Add());
        add(mModFreqPassThrough = new PassThrough());
        addPort(modFreq = mModFreqPassThrough.input, "modFreq");
        add(mModAmpPassThrough = new PassThrough());
        addPort(ModAmp = mModAmpPassThrough.input, "ModAmp");
        add(mMonoRdr = new VariableRateMonoReader());
        double[] mSegEnvData = {
            0.019331812469863686, 1.0,
            0.025180136537071948, 1.0,
            0.07850867580128781, 0.7692307692307693,
            0.1195057498137028, 0.7692307692307693,
            0.1581693747534301, 0.2264957264957265,
            0.21429492652795312, 0.01282051282051282,
            0.0, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        mSegEnv.setSustainBegin( 3 );
        mSegEnv.setSustainEnd( 4 );
//        mSegEnv.setReleaseBegin( 4 );
//        mSegEnv.setReleaseEnd( 4 );
        double[] mModEnvData = { 0.0, 0.0, 
        		0.4266612978385324, 0.3504273504273504, 
        		0.054441400575849064, 1.0,
				3.28003367052731, 0.6495726495726496, 
				3.679789618318827, 0.5982905982905983, 
				5.021517620031197, 0.0, };
        mModEnv = new SegmentedEnvelope( mModEnvData );
        add(mMonoRdr2 = new VariableRateMonoReader());
        add(mAtimes = new Multiply());
        double[] mModEnv2Data = { 0.0, 1.0, 
        		1.1286870669031854, 0.5170940170940171, 
        		0.6967969202435642,	0.2094017094017094, 
        		2.492714101028315, 0.0641025641025641, 
        		3.155413588434678, 0.0, };
        mModEnv2 = new SegmentedEnvelope( mModEnv2Data );
        add(mMonoRdr22 = new VariableRateMonoReader());
        add(mAtimes2 = new Multiply());
        add(mSawOsc = new SawtoothOscillator());
        add(mSineOsc = new SineOscillator());
        add(mAtimes3 = new Multiply());
        add(mAtimes4 = new Multiply());
        add(mLowPass = new FilterLowPass());
        add(mAtimes5 = new Multiply());
        add(mAtimes6 = new Multiply());
        add(mLPF_CutPassThrough = new PassThrough());
        addPort(LPF_Cut = mLPF_CutPassThrough.input, "LPF_Cut");
        add(mARanger = new RangeConverter());
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mAtimes3.inputA);
        mFrequencyPassThrough.output.connect(mAplus.inputA);
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mModOsc.output.connect(mAplus.inputB);
        mAplus.output.connect(mSawOsc.frequency);
        mModFreqPassThrough.output.connect(mAtimes2.inputA);
        mModAmpPassThrough.output.connect(mAtimes.inputB);
        mMonoRdr.output.connect(mAtimes4.inputA);
        mMonoRdr.output.connect(mSawOsc.amplitude);
        mMonoRdr2.output.connect(mAtimes.inputA);
        mAtimes.output.connect(mModOsc.amplitude);
        mMonoRdr22.output.connect(mAtimes2.inputB);
        mMonoRdr22.output.connect(mAtimes5.inputA);
        mAtimes2.output.connect(mModOsc.frequency);
        mSawOsc.output.connect(mLowPass.input);
        mSineOsc.output.connect(mARanger.input);
        mAtimes3.output.connect(mSineOsc.frequency);
        mAtimes4.output.connect(mSineOsc.amplitude);
        mLowPass.output.connect(mARanger.input);
        mAtimes5.output.connect(mLowPass.frequency);
        mLPF_CutPassThrough.output.connect(mAtimes5.inputB);
        mARanger.output.connect(mOutputPassThrough.input);
        // Setup
        frequency.setup(0.0, 412.34876370518845, 824.6975274103769);
        amplitude.setup(0.0, 0.1175719, 1.0);
        modFreq.setup(0.0, 500., 1735.1032);
        ModAmp.setup(0.0, 800., 3597.6704);
        mMonoRdr.rate.set(1.0);
        mMonoRdr2.amplitude.set(0.679);
        mMonoRdr2.rate.set(1.0);
        mMonoRdr22.amplitude.set(0.679);
        mMonoRdr22.rate.set(1.0);
        mAtimes3.inputB.set(0.25);
        mAtimes4.inputB.set(0.5);
        mLowPass.amplitude.set(1.0);
        mLowPass.Q.set(6.0);
        mAtimes6.inputA.set(0.0);
        mAtimes6.inputB.set(0.0);
        LPF_Cut.setup(120.0, 4000., 12000.0);
        mARanger.min.set(-0.9);
        mARanger.max.set(0.9);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
        mMonoRdr2.dataQueue.queueOn( mModEnv, timeStamp);
        mMonoRdr22.dataQueue.queueOn( mModEnv2, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
        mMonoRdr2.dataQueue.queueOff( mModEnv, false, timeStamp);
        mMonoRdr22.dataQueue.queueOff( mModEnv2, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
    public static void main(String[] args) {

		final Synthesizer synth = JSyn.createSynthesizer();

		synth.start();

// CHANGE THE FOLLOWING LINE OF CODE TO YOURS

		// SineFM voice = new SineFM();
		SawLaserBass voice1 = new SawLaserBass();
		MixerStereo mix = new MixerStereo(2);
		voice1.getOutput().connect(mix.input);
		synth.add(mix);
		synth.add(voice1);

		LineOut out = new LineOut();

		synth.add(out);

		out.start();

		mix.getOutput().connect(0, out.input, 0);

		mix.getOutput().connect(0, out.input, 1);

		JFrame jf = new JFrame();

		SoundTweaker tweaker = new SoundTweaker(synth, "Test this sound", voice1);

		jf.add(tweaker);

		jf.pack();

		jf.setVisible(true);

		jf.addWindowListener(new WindowAdapter() {

			public void windowClosing(WindowEvent e) {

				synth.stop();

				System.exit(0);

			}

		});

	}
}
