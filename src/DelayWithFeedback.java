package algomusicfall2021.jerry.finalproject;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.unitgen.Add;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.InterpolatingDelay;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.UnitSink;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;

public class DelayWithFeedback extends Circuit implements UnitVoice, UnitSink {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SegmentedEnvelope mSegEnv;
    VariableRateMonoReader mMonoRdr;
    Multiply mAtimes;
    Multiply mAtimes2;
    Add mAplus;
    InterpolatingDelay mDelay1;
    PassThrough mAInputPassThrough;
    public UnitInputPort aInput;
    PassThrough mFeedbackPassThrough;
    public UnitInputPort feedback;
    PassThrough mDelayPassThrough;
    public UnitInputPort delay;

    // Declare inner classes for any child circuits.

    public DelayWithFeedback() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort(output = mOutputPassThrough.output, "output");
        double[] mSegEnvData = {
            0.5, 1.0,
            0.5175438596491229, 1.0,
            1.190532625633101, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        add(mMonoRdr = new VariableRateMonoReader());
        add(mAtimes = new Multiply());
        add(mAtimes2 = new Multiply());
        add(mAplus = new Add());
        add(mDelay1 = new InterpolatingDelay());
        add(mAInputPassThrough = new PassThrough());
        addPort(aInput = mAInputPassThrough.input, "aInput");
        add(mFeedbackPassThrough = new PassThrough());
        addPort(feedback = mFeedbackPassThrough.input, "feedback");
        add(mDelayPassThrough = new PassThrough());
        addPort(delay = mDelayPassThrough.input, "delay");
        // Connect units and ports.
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mMonoRdr.output.connect(mAtimes.inputB);
        mAtimes.output.connect(mOutputPassThrough.input);
        mAtimes2.output.connect(mAplus.inputA);
        mAplus.output.connect(mDelay1.input);
        mDelay1.output.connect(mAtimes2.inputB);
        mDelay1.output.connect(mAtimes.inputA);
        mAInputPassThrough.output.connect(mAplus.inputB);
        mFeedbackPassThrough.output.connect(mAtimes2.inputA);
        mDelayPassThrough.output.connect(mDelay1.delay);
        // Setup
        frequency.setup(0.0, 0.0, 1.0);
        amplitude.setup(0.0, 1.0, 1.0);
        mMonoRdr.rate.set(1.0);
        mDelay1.allocate(44100);
        aInput.setup(0.0, 0.0, 1.0);
        feedback.setup(0.0, 0.5, 1.0);
        delay.setup(0.0, 0.5, 1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }

	@Override
	public UnitInputPort getInput() {
		// TODO Auto-generated method stub
		return aInput;
	}
}
